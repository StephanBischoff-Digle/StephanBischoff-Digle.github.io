<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Stephan Bischoff</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Stephan Bischoff</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 13 May 2020 17:19:51 +0200</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Head-Controller Intro</title>
            <link>/posts/2020/05/head-controller-intro/</link>
            <pubDate>Wed, 13 May 2020 17:19:51 +0200</pubDate>
            
            <guid>/posts/2020/05/head-controller-intro/</guid>
            <description>General Idea  Minimize uncertainty of the location of vision related objects on the playing field  Static objects such as field markings and the goal Dynamic objects such as the ball and other robots.   Based on probabilistic distributions from the detectors and predictors Weighted on game state  Ball is not important after a goal is scored Could be modeled via weight profiles    Probability Distribution  Represented as a grid or quad tree … or something in between Grid can easily be filled with partial data and normalized to any value Quad tree is more based on areas Distributions can be layered with a game-state factor  Solver  naive approach would be a search for maxima&amp;rsquo;s while updating the distribution, such that the current view is always in the global minimum.</description>
            <content type="html"><![CDATA[<h2 id="general-idea">General Idea</h2>
<ul>
<li>Minimize uncertainty of the location of vision related objects on the playing
field
<ul>
<li><em>Static objects</em> such as field markings and the goal</li>
<li><em>Dynamic objects</em> such as the ball and other robots.</li>
</ul>
</li>
<li>Based on probabilistic distributions from the detectors and predictors</li>
<li>Weighted on game state
<ul>
<li>Ball is not important after a goal is scored</li>
<li>Could be modeled via weight profiles</li>
</ul>
</li>
</ul>
<h2 id="probability-distribution">Probability Distribution</h2>
<ul>
<li>Represented as a grid or quad tree … or something in between</li>
<li>Grid can easily be filled with partial data and normalized to any value</li>
<li>Quad tree is more based on areas</li>
<li>Distributions can be layered with a game-state factor</li>
</ul>
<h2 id="solver">Solver</h2>
<ul>
<li>naive approach would be a search for maxima&rsquo;s while updating the distribution,
such that the current view is always in the global minimum.
<ul>
<li>An argument is necessary to handle the situation when we actually found
something. For example, the game-mode-factor for the found object type
could be nulled until the uncertainty reaches a threshold again.
Although, how to handle multiple objects of the same type remains a
problem.</li>
</ul>
</li>
</ul>
<h3 id="inverse-gradient-descent">Inverse Gradient Descent</h3>
<ul>
<li>Instead of a local minimum we search for the local maximum by taking the
steepest path up the slope instead of down</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
